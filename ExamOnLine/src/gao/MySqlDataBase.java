package gao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class MySqlDataBase implements ABDataBase {
	
	static String DBURL = null;
	static Properties prop = null;
	
	
	public MySqlDataBase() {
		if(DBURL == null){
		 prop = new Properties();
		 try {
				prop.load(this.getClass().getClassLoader()
						.getResourceAsStream("config/DB.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			DBURL = prop.getProperty("DBURL");
		}
		
	}

	
	
	public Connection getConn() {
		Connection conn = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");

			conn = DriverManager.getConnection("jdbc:mysql://"+DBURL);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return conn;
	}

	public Statement getST(Connection c) {
		Statement st = null;
		try {
			st = c.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return st;

	}

	public PreparedStatement getPST(Connection c, String sql) {
		PreparedStatement pst = null;
		try {
			pst = c.prepareStatement(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pst;

	}

	public PreparedStatement getPST(Connection c, String sql,
			int autoGeneratedKey) {
		PreparedStatement pst = null;
		try {
			pst = c.prepareStatement(sql, autoGeneratedKey);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pst;

	}

	public ResultSet executeQuery(Statement st, String sql) {
		ResultSet rs = null;
		try {
			rs = st.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rs;

	}

	public int executeUpdate(Statement st, String sql) {
		int affect = 0;
		try {
			affect = st.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return affect;

	}

	public void close(Connection c) {
		try {
			if (c != null) {
				c.close();
				c = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void close(Statement s) {
		try {
			if (s != null) {
				s.close();
				s = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void close(ResultSet rs) {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public User find(String name) {

		Connection conn = getConn();
		Statement st = getST(conn);
		String sql = "select * from user where name =  '" + name + "'";
		//System.out.println(sql);	
		ResultSet rs = executeQuery(st, sql);
		User user = null;
		try {
			if (rs != null && rs.next()) {
				user = new User(rs.getInt("id"), rs.getString("name"),
						rs.getString("password"));
		 
			} 
		} catch (SQLException e) {
			System.out.println("MySqlDataBase--boolean find");
			e.printStackTrace();
			
		} finally {
			close(conn);
			close(st);
			close(rs);
			return user;
		}
	}
	
	public User obscureFind(String name) {

		Connection conn = getConn();
		Statement st = getST(conn);
		String sql = "select * from user where name like '%" + name + "%'";
		//System.out.println(sql);	
		ResultSet rs = executeQuery(st, sql);
		User user = null;
		try {
			if (rs != null && rs.next()) {
				user = new User(rs.getInt("id"), rs.getString("name"),
						rs.getString("password"));
		 
			} 
		} catch (SQLException e) {
			System.out.println("MySqlDataBase--boolean find");
			e.printStackTrace();
			
		} finally {
			close(conn);
			close(st);
			close(rs);
			return user;
		}
	}

	public int add(User user) {
		String sql = "insert into user values ( null ,'" + user.getName()
				+ "','" + user.getPassWord() + "')";
		Connection conn = getConn();
		Statement st = getST(conn);
		int a = executeUpdate(st, sql);
		close(conn);
		close(st);
		return a;

	}

	public int delete(User user) {
		String sql = "delete from user where name = '" + user.getName() + "'";

		Connection conn = getConn();
		Statement st = getST(conn);
		int a = executeUpdate(st, sql);
		close(conn);
		close(st);
		return a;

	}

	public int update(User user) {
		String sql = "update user set password = '" + user.getPassWord()
				+ "' where name = '" + user.getName() + "'";

		Connection conn = getConn();
		Statement st = getST(conn);
		int a = executeUpdate(st, sql);
		close(conn);
		close(st);
		return a;

	}

	public void getAllCategory(List<Category> categorys) {
		String sql = "select * from category ";

		Connection conn = getConn();
		Statement st = getST(conn);
		ResultSet rs = executeQuery(st, sql);
		try {
			while (rs != null && rs.next()) {
				Category c = new Category(rs.getInt(1), rs.getString(2));
				categorys.add(c);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn);
			close(st);
			close(rs);
			
		}

	}
	
	public int sepGetQuestions(List<Question> questions,int id,int pageSize,int pageNo){
		int totalPages = 0;
		int totalRecords = 0;
		Connection conn =getConn();
		Statement st = getST(conn);
		ResultSet rs = executeQuery(st,
				"select count(*) from question where categoryId = "+ id);
		try{
			if (rs != null && rs.next()) {
				totalRecords = rs.getInt(1);
			} else {
				totalRecords = 0;
			}
			totalPages = (totalRecords % pageSize == 0) ? (totalRecords / pageSize)
					: (totalRecords / pageSize + 1);
			if (pageNo > totalPages) {
				pageNo = 1;
			}
			int startPos = (pageNo - 1) * pageSize;

			String sql = "select * from question where categoryId = "
					+ id + " limit " + startPos + "," + pageSize;
			
			rs = executeQuery(st, sql);
			while (rs != null && rs.next()) {
				Question c = new Question();
				c.initFromRS(rs);
				questions.add(c);
			}
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			close(conn);
			close(st);
			close(rs);
			return totalPages;
		}
	}
	
	public int[] getAllCategoryId(){
		int[] allId = null;
		String sql = "select id from category ";
		Connection conn = getConn();
		Statement st = getST(conn);
		ResultSet rs = executeQuery(st,"select count(*) from category");
		try{
			if(rs!=null && rs.next()){
				int count = rs.getInt(1);
				allId = new int[count];
				rs = executeQuery(st,sql);
				for(int i=0;rs.next();i++){
					allId[i] = rs.getInt(1);
				}
			}
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			close(conn);
			close(st);
			close(rs);
			return allId;
		}
		
	}
	
	public int add(Question q) {
		
		Connection conn = getConn();
		PreparedStatement prest = null;
		int a = 0;
		try {
			prest = conn.prepareStatement("insert into question values (null,?,?,?,?,?,?,?)");
		
			prest.setInt(1, q.getCategoryId());
			prest.setString(2, q.getCont());
			prest.setString(3, q.getOptionA());
			prest.setString(4, q.getOptionB());
			prest.setString(5, q.getOptionC());
			prest.setString(6, q.getOptionD());
			prest.setString(7, q.getAnswer());

			a = prest.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		}
		close(conn);
		close(prest);
		return a;

	}
	
	public int delete(Question q) {
		String sql = "delete from question where id = " + q.getId();
		Connection conn = getConn();
		Statement st = getST(conn);
		int a = executeUpdate(st, sql);
		close(conn);
		close(st);
		return a;

	}
//-1:不存在此类型题目。-2：没有类型。0：没有此id号或没有做更改
	public int update(Question q) {
		String sql = "update question set id = "+q.getId();
//System.out.println(q.getCategoryId());
		if(q.getCategoryId()!=0){
			int[] allId = getAllCategoryId();
			if(allId!=null && allId.length>0){
				int categoryId = q.getCategoryId();
				boolean b = false;
				for(int k : allId){
					if(k==categoryId){
						b = true;
						break;
					}
				}
				if(!b){
					return -1;
				}
			}else {
				return -2;
			}
			sql += ",categoryId = "+ q.getCategoryId();
		}
		if(q.getCont()!=null && !q.getCont().trim().equals("")){
			sql += ",cont = '"+q.getCont()+"'";
		}
		if(q.getOptionA()!=null && !q.getOptionA().trim().equals("")){
			sql += ",optionA = '"+q.getOptionA()+"'";
		}
		if(q.getOptionB()!=null && !q.getOptionB().trim().equals("")){
			sql += ",optionB = '"+q.getOptionB()+"'";
		}
		if(q.getOptionC()!=null && !q.getOptionC().trim().equals("")){
			sql += ",optionC = '"+q.getOptionC()+"'";
		}
		if(q.getOptionD()!=null && !q.getOptionD().trim().equals("")){
			sql += ",optionD = '"+q.getOptionD()+"'";
		}
		if(q.getAnswer()!=null && !q.getAnswer().trim().equals("")){
			sql += ",answer = '"+q.getAnswer()+"'";
		}
		sql += " where id = " + q.getId();
//System.out.println(sql);
		
		Connection conn = getConn();
		Statement st = getST(conn);
		int a = executeUpdate(st, sql);
		close(conn);
		close(st);
		return a;

	}
	
	public List<Question> findQuestion(String cont) {

		Connection conn = getConn();
		Statement st = getST(conn);
		String sql = "select * from question where cont like '%" + cont + "%'";
        List<Question> questions = new ArrayList<Question>();
		ResultSet rs = executeQuery(st, sql);

		try {
			while (rs != null && rs.next()) {
				Question q = new Question();
				q.initFromRS(rs);
				questions.add(q);
			}
		} catch (SQLException e) {
			System.out.println("MySqlDataBase--findQuestion");
			e.printStackTrace();
			
		} finally {
			close(conn);
			close(st);
			close(rs);
			return questions;
		}
	}
	
	public String getAnswerByQuestionId(int questionId){
		Connection conn = getConn();
		Statement st = getST(conn);
		String sql = "select answer from question where id = "+questionId;
		ResultSet rs = executeQuery(st, sql);
		String answer = null;
		try {
			while (rs != null && rs.next()) {
				answer = rs.getString(1).trim();
			}
		} catch (SQLException e) {
			System.out.println("MySqlDataBase--getanswer");
			e.printStackTrace();
			
		} finally {
			close(conn);
			close(st);
			close(rs);
			return answer;
		}
		
	}

}
